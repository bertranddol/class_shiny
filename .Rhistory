dfs$Tot_unmatch <- 0
dfs$New_Hotel <- 0
dfs$New_match <- 0
dfs$New_potential <- 0
dfs$New_unmatch <- 0
dfs$New_drop <- 0
dfs$New_relation <- 0
dfs$New_relation_old_hotel <- 0
for ( ii in 1:nrow(dfs ) ) {
source<-dfs[ii,1]
# Total hotel matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'})-[r:confirmautomatch]-(m) where n.QL2_CREATED_ON<=",params$ql2_day," RETURN count(distinct(n) );")
dfs[ii,]$Tot_match <- cypher(graph, query)[1,1]
# Total hotels unmatch by source
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() and n.QL2_CREATED_ON<=",params$ql2_day," return count(distinct(n) ) ;" )
dfs[ii,]$Tot_unmatch <- cypher(graph, query)[1,1]
# NEW hotels by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"', QL2_CREATED_ON:",params$ql2_day,"}) RETURN count(distinct(n));")
dfs[ii,]$New_Hotel <- cypher(graph, query)[1,1]
# NEW matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:confirmautomatch]-(m) RETURN count(distinct(n));")
dfs[ii,]$New_match <- cypher(graph, query)[1,1]
# NEW potential hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:potential]-(m) return count(distinct(n));" )
dfs[ii,]$New_potential <- cypher(graph, query)[1,1]
# NEW unmatch hotels by source
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() return count(distinct(n));" )
dfs[ii,]$New_unmatch <- cypher(graph, query)[1,1]
# NEW dropped hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' }) where ( n.QL2_LAST_SEEN<", params$ql2_day,") return count(distinct(n));" )
dfs[ii,]$New_drop <- cypher(graph, query)[1,1]
# NEW hotels new relations
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch]-() return count( r );" )
dfs[ii,]$New_relation <- cypher(graph, query)[1,1]
# OLD hotels new relations
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch{QL2_CREATED_ON:", params$ql2_day,"}]-() where n.QL2_CREATED_ON < " , params$ql2_day, " return count( r );" )
dfs[ii,]$New_relation_old_hotel <- cypher(graph, query)[1,1]
}
write.table( dfs ,  file = paste0(basepath, "/data/",params$ql2_day, "_MATCH_STAT_", params$country, ".csv"), row.names=FALSE, na="", col.names=TRUE, sep=",", append=FALSE )
dfs
query<- paste0( "match (n:ql2hotels {QL2_CREATED_ON:",params$ql2_day,",COUNTRY_UCODE:'",params$country,"' }) WHERE NOT (n)-[:confirmautomatch]-() and (n.SOURCE<>'EXP') RETURN n.SOURCE,n.PROPERTY_ID,n.HOTELNAME,n.ADD1,n.ADD2,n.CITY ORDER by n.PROPERTY_ID; " )
matchdf <- cypher(graph, query)
if ( is.data.frame(matchdf)==TRUE && nrow(matchdf ) > 0 ) {
matchdf <- matchdf[order(matchdf$n.PROPERTY_ID),]
matchdf<-unique(matchdf)
write.table( matchdf ,  file = paste0(basepath, "/data/",params$ql2_day, "_NEW_UNKNOWN_HOTELS_", params$country, ".csv"), row.names=FALSE, na="", col.names=TRUE, sep=",", append=FALSE )
}
# Total new hotels by SOURCE
query<- paste0( "MATCH (n:ql2hotels{COUNTRY_UCODE:'CH'}) where n.QL2_CREATED_ON<=",params$ql2_day," and n.QL2_LAST_SEEN>=",params$ql2_day," return n.SOURCE as Source,count(*) as Tot_Hotel ORDER BY Tot_Hotel DESC;" )
dfs <- cypher(graph, query)
dfs$Tot_match <- 0
dfs$Tot_unmatch <- 0
dfs$New_Hotel <- 0
dfs$New_match <- 0
dfs$New_potential <- 0
dfs$New_unmatch <- 0
dfs$New_drop <- 0
dfs$New_relation <- 0
dfs$New_relation_old_hotel <- 0
for ( ii in 1:nrow(dfs ) ) {
source<-dfs[ii,1]
# Total hotel matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'})-[r:confirmautomatch]-(m) where n.QL2_CREATED_ON<=",params$ql2_day," RETURN count(distinct(n) );")
dfs[ii,]$Tot_match <- cypher(graph, query)[1,1]
# Total hotels unmatch by source
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() and n.QL2_CREATED_ON<=",params$ql2_day," return count(distinct(n) ) ;" )
dfs[ii,]$Tot_unmatch <- cypher(graph, query)[1,1]
# NEW hotels by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"', QL2_CREATED_ON:",params$ql2_day,"}) RETURN count(distinct(n));")
dfs[ii,]$New_Hotel <- cypher(graph, query)[1,1]
# NEW matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:confirmautomatch]-(m) RETURN count(distinct(n));")
dfs[ii,]$New_match <- cypher(graph, query)[1,1]
# NEW potential hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:potential]-(m) return count(distinct(n));" )
dfs[ii,]$New_potential <- cypher(graph, query)[1,1]
# NEW unmatch hotels by source
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() return count(distinct(n));" )
dfs[ii,]$New_unmatch <- cypher(graph, query)[1,1]
# NEW dropped hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' }) where ( n.QL2_LAST_SEEN<", params$ql2_day,") return count(distinct(n));" )
dfs[ii,]$New_drop <- cypher(graph, query)[1,1]
# NEW hotels new relations
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch]-() return count( r );" )
dfs[ii,]$New_relation <- cypher(graph, query)[1,1]
# OLD hotels new relations
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch{QL2_CREATED_ON:", params$ql2_day,"}]-() where n.QL2_CREATED_ON < " , params$ql2_day, " return count( r );" )
dfs[ii,]$New_relation_old_hotel <- cypher(graph, query)[1,1]
}
write.table( dfs ,  file = paste0(basepath, "/data/",params$ql2_day, "_MATCH_STAT_", params$country, ".csv"), row.names=FALSE, na="", col.names=TRUE, sep=",", append=FALSE )
dfs
# Total new hotels by SOURCE
query<- paste0( "MATCH (n:ql2hotels{COUNTRY_UCODE:'CH'}) where n.QL2_CREATED_ON<=",params$ql2_day," and n.QL2_LAST_SEEN>=",params$ql2_day," return n.SOURCE as Source,count(*) as Tot_Hotel ORDER BY Tot_Hotel DESC;" )
dfs <- cypher(graph, query)
dfs$Tot_match <- 0
dfs$Tot_unmatch <- 0
dfs$New_Hotel <- 0
dfs$New_match <- 0
dfs$New_potential <- 0
dfs$New_unmatch <- 0
dfs$New_drop <- 0
dfs$New_relation <- 0
dfs$New_relation_old_hotel <- 0
for ( ii in 1:nrow(dfs ) ) {
source<-dfs[ii,1]
# Total hotel matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'})-[r:confirmautomatch]-(m) where n.QL2_CREATED_ON<=",params$ql2_day," RETURN count(distinct(n) );")
dfs[ii,]$Tot_match <- cypher(graph, query)[1,1]
# Total hotels unmatch by source
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() and n.QL2_CREATED_ON<=",params$ql2_day," return count(distinct(n) ) ;" )
dfs[ii,]$Tot_unmatch <- cypher(graph, query)[1,1]
# NEW hotels by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"', QL2_CREATED_ON:",params$ql2_day,"}) RETURN count(distinct(n));")
dfs[ii,]$New_Hotel <- cypher(graph, query)[1,1]
# NEW matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:confirmautomatch]-(m) RETURN count(distinct(n));")
dfs[ii,]$New_match <- cypher(graph, query)[1,1]
# NEW potential hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:potential]-(m) return count(distinct(n));" )
dfs[ii,]$New_potential <- cypher(graph, query)[1,1]
# NEW unmatch hotels by source
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() return count(distinct(n));" )
dfs[ii,]$New_unmatch <- cypher(graph, query)[1,1]
# NEW dropped hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' }) where ( n.QL2_LAST_SEEN<", params$ql2_day,") return count(distinct(n));" )
dfs[ii,]$New_drop <- cypher(graph, query)[1,1]
# NEW hotels new relations
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch]-() return count( r );" )
dfs[ii,]$New_relation <- cypher(graph, query)[1,1]
# OLD hotels new relations
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch{QL2_CREATED_ON:", params$ql2_day,"}]-() where n.QL2_CREATED_ON < " , params$ql2_day, " return count( r );" )
dfs[ii,]$New_relation_old_hotel <- cypher(graph, query)[1,1]
}
write.table( dfs ,  file = paste0(basepath, "/data/",params$ql2_day, "_MATCH_STAT_", params$country, ".csv"), row.names=FALSE, na="", col.names=TRUE, sep=",", append=FALSE )
dfs
# Total new hotels by SOURCE
query<- paste0( "MATCH (n:ql2hotels{COUNTRY_UCODE:'CH'}) where n.QL2_CREATED_ON<=",params$ql2_day," and n.QL2_LAST_SEEN>=",params$ql2_day," return n.SOURCE as Source,count(*) as Tot_Hotel ORDER BY Tot_Hotel DESC;" )
dfs <- cypher(graph, query)
dfs$Tot_match <- 0
dfs$Tot_unmatch <- 0
dfs$New_Hotel <- 0
dfs$New_match <- 0
dfs$New_potential <- 0
dfs$New_unmatch <- 0
dfs$New_drop <- 0
dfs$New_relation <- 0
dfs$New_relation_old_hotel <- 0
for ( ii in 1:nrow(dfs ) ) {
source<-dfs[ii,1]
# Total hotel matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'})-[r:confirmautomatch]-(m) where n.QL2_CREATED_ON<=",params$ql2_day," RETURN count(distinct(n) );")
dfs[ii,]$Tot_match <- cypher(graph, query)[1,1]
# Total hotels unmatch by source
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() and n.QL2_CREATED_ON<=",params$ql2_day," return count(distinct(n) ) ;" )
dfs[ii,]$Tot_unmatch <- cypher(graph, query)[1,1]
# NEW hotels by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"', QL2_CREATED_ON:",params$ql2_day,"}) RETURN count(distinct(n));")
dfs[ii,]$New_Hotel <- cypher(graph, query)[1,1]
# NEW matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:confirmautomatch]-(m) RETURN count(distinct(n));")
dfs[ii,]$New_match <- cypher(graph, query)[1,1]
# NEW potential hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:potential]-(m) return count(distinct(n));" )
dfs[ii,]$New_potential <- cypher(graph, query)[1,1]
# NEW unmatch hotels by source
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() return count(distinct(n));" )
dfs[ii,]$New_unmatch <- cypher(graph, query)[1,1]
# NEW dropped hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' }) where ( n.QL2_LAST_SEEN<", params$ql2_day,") return count(distinct(n));" )
dfs[ii,]$New_drop <- cypher(graph, query)[1,1]
# NEW hotels new relations
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch]-() return count( r );" )
dfs[ii,]$New_relation <- cypher(graph, query)[1,1]
# OLD hotels new relations
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch{QL2_CREATED_ON:", params$ql2_day,"}]-() where n.QL2_CREATED_ON < " , params$ql2_day, " return count( r );" )
dfs[ii,]$New_relation_old_hotel <- cypher(graph, query)[1,1]
}
write.table( dfs ,  file = paste0(basepath, "/data/",params$ql2_day, "_MATCH_STAT_", params$country, ".csv"), row.names=FALSE, na="", col.names=TRUE, sep=",", append=FALSE )
dfs
query<- paste0( "match (n:ql2hotels {QL2_CREATED_ON:",params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'EXP' })-[r:potential*1..4]-(m) WHERE (m.PROPERTY_ID<>n.PROPERTY_ID) RETURN n.SOURCE,n.PROPERTY_ID,n.HOTELNAME,n.ADD1,n.ADD2,n.CITY,m.SOURCE,m.PROPERTY_ID,m.HOTELNAME,m.ADD1,m.ADD2,m.CITY ORDER by n.PROPERTY_ID; " )
matchdf <- cypher(graph, query)
if ( is.data.frame(matchdf)==TRUE && nrow(matchdf ) > 0 ) {
matchdf <- matchdf[order(matchdf$n.PROPERTY_ID),]
matchdf<-unique(matchdf)
write.table( matchdf ,  file = paste0(basepath, "/data/",params$ql2_day, "_NEW_POTENTIAL_", params$country, ".csv"), row.names=FALSE, na="", col.names=TRUE, sep=",", append=FALSE )
}
# Total new hotels by SOURCE
query<- paste0( "MATCH (n:ql2hotels{COUNTRY_UCODE:'CH'}) where n.QL2_CREATED_ON<=",params$ql2_day," and n.QL2_LAST_SEEN>=",params$ql2_day," return n.SOURCE as Source,count(*) as Tot_Hotel ORDER BY Tot_Hotel DESC;" )
dfs <- cypher(graph, query)
dfs$Tot_match <- 0
dfs$Tot_unmatch <- 0
dfs$New_Hotel <- 0
dfs$New_match <- 0
dfs$New_potential <- 0
dfs$New_unmatch <- 0
dfs$New_drop <- 0
dfs$New_relation <- 0
dfs$New_relation_old_hotel <- 0
for ( ii in 1:nrow(dfs ) ) {
source<-dfs[ii,1]
# Total hotel matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'})-[r:confirmautomatch]-(m) where n.QL2_CREATED_ON<=",params$ql2_day," RETURN count(distinct(n) );")
dfs[ii,]$Tot_match <- cypher(graph, query)[1,1]
# Total hotels unmatch by source
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() and n.QL2_CREATED_ON<=",params$ql2_day," return count(distinct(n) ) ;" )
dfs[ii,]$Tot_unmatch <- cypher(graph, query)[1,1]
# NEW hotels by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"', QL2_CREATED_ON:",params$ql2_day,"}) RETURN count(distinct(n));")
dfs[ii,]$New_Hotel <- cypher(graph, query)[1,1]
# NEW matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:confirmautomatch]-(m) RETURN count(distinct(n));")
dfs[ii,]$New_match <- cypher(graph, query)[1,1]
# NEW potential hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:potential]-(m) return count(distinct(n));" )
dfs[ii,]$New_potential <- cypher(graph, query)[1,1]
# NEW unmatch hotels by source
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() return count(distinct(n));" )
dfs[ii,]$New_unmatch <- cypher(graph, query)[1,1]
# NEW dropped hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' }) where ( n.QL2_LAST_SEEN<", params$ql2_day,") return count(distinct(n));" )
dfs[ii,]$New_drop <- cypher(graph, query)[1,1]
# NEW hotels new relations
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch]-() return count( r );" )
dfs[ii,]$New_relation <- cypher(graph, query)[1,1]
# OLD hotels new relations
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch{QL2_CREATED_ON:", params$ql2_day,"}]-() where n.QL2_CREATED_ON < " , params$ql2_day, " return count( r );" )
dfs[ii,]$New_relation_old_hotel <- cypher(graph, query)[1,1]
}
write.table( dfs ,  file = paste0(basepath, "/data/",params$ql2_day, "_MATCH_STAT_", params$country, ".csv"), row.names=FALSE, na="", col.names=TRUE, sep=",", append=FALSE )
dfs
# Total new hotels by SOURCE
query<- paste0( "MATCH (n:ql2hotels{COUNTRY_UCODE:'CH'}) where n.QL2_CREATED_ON<=",params$ql2_day," and n.QL2_LAST_SEEN>=",params$ql2_day," return n.SOURCE as Source,count(*) as Tot_Hotel ORDER BY Tot_Hotel DESC;" )
dfs <- cypher(graph, query)
dfs$Tot_match <- 0
dfs$Tot_unmatch <- 0
dfs$New_Hotel <- 0
dfs$New_match <- 0
dfs$New_potential <- 0
dfs$New_unmatch <- 0
dfs$New_drop <- 0
dfs$New_relation <- 0
dfs$New_relation_old_hotel <- 0
for ( ii in 1:nrow(dfs ) ) {
source<-dfs[ii,1]
# Total hotel matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'})-[r:confirmautomatch]-(m) where n.QL2_CREATED_ON<=",params$ql2_day," RETURN count(distinct(n) );")
dfs[ii,]$Tot_match <- cypher(graph, query)[1,1]
# Total hotels unmatch by source
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() and n.QL2_CREATED_ON<=",params$ql2_day," return count(distinct(n) ) ;" )
dfs[ii,]$Tot_unmatch <- cypher(graph, query)[1,1]
# NEW hotels by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"', QL2_CREATED_ON:",params$ql2_day,"}) RETURN count(distinct(n));")
dfs[ii,]$New_Hotel <- cypher(graph, query)[1,1]
# NEW matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:confirmautomatch]-(m) RETURN count(distinct(n));")
dfs[ii,]$New_match <- cypher(graph, query)[1,1]
# NEW potential hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:potential]-(m) return count(distinct(n));" )
dfs[ii,]$New_potential <- cypher(graph, query)[1,1]
# NEW unmatch hotels by source
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() return count(distinct(n));" )
dfs[ii,]$New_unmatch <- cypher(graph, query)[1,1]
# NEW dropped hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' }) where ( n.QL2_LAST_SEEN<", params$ql2_day,") return count(distinct(n));" )
dfs[ii,]$New_drop <- cypher(graph, query)[1,1]
# NEW hotels new relations
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch]-() return count( r );" )
dfs[ii,]$New_relation <- cypher(graph, query)[1,1]
# OLD hotels new relations
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch{QL2_CREATED_ON:", params$ql2_day,"}]-() where n.QL2_CREATED_ON < " , params$ql2_day, " return count( r );" )
dfs[ii,]$New_relation_old_hotel <- cypher(graph, query)[1,1]
}
write.table( dfs ,  file = paste0(basepath, "/data/",params$ql2_day, "_MATCH_STAT_", params$country, ".csv"), row.names=FALSE, na="", col.names=TRUE, sep=",", append=FALSE )
dfs
# Total new hotels by SOURCE
query<- paste0( "MATCH (n:ql2hotels{COUNTRY_UCODE:'CH'}) where n.QL2_CREATED_ON<=",params$ql2_day," and n.QL2_LAST_SEEN>=",params$ql2_day," return n.SOURCE as Source,count(*) as Tot_Hotel ORDER BY Tot_Hotel DESC;" )
dfs <- cypher(graph, query)
dfs$Tot_match <- 0
dfs$Tot_unmatch <- 0
dfs$New_Hotel <- 0
dfs$New_match <- 0
dfs$New_potential <- 0
dfs$New_unmatch <- 0
dfs$New_drop <- 0
dfs$New_relation <- 0
dfs$New_relation_old_hotel <- 0
for ( ii in 1:nrow(dfs ) ) {
source<-dfs[ii,1]
# Total hotel matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'})-[r:confirmautomatch]-(m) where n.QL2_CREATED_ON<=",params$ql2_day," RETURN count(distinct(n) );")
dfs[ii,]$Tot_match <- cypher(graph, query)[1,1]
# Total hotels unmatch by source
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() and n.QL2_CREATED_ON<=",params$ql2_day," return count(distinct(n) ) ;" )
dfs[ii,]$Tot_unmatch <- cypher(graph, query)[1,1]
# NEW hotels by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"', QL2_CREATED_ON:",params$ql2_day,"}) RETURN count(distinct(n));")
dfs[ii,]$New_Hotel <- cypher(graph, query)[1,1]
# NEW matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:confirmautomatch]-(m) RETURN count(distinct(n));")
dfs[ii,]$New_match <- cypher(graph, query)[1,1]
# NEW potential hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:potential]-(m) return count(distinct(n));" )
dfs[ii,]$New_potential <- cypher(graph, query)[1,1]
# NEW unmatch hotels by source
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() return count(distinct(n));" )
dfs[ii,]$New_unmatch <- cypher(graph, query)[1,1]
# NEW dropped hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' }) where ( n.QL2_LAST_SEEN<", params$ql2_day,") return count(distinct(n));" )
dfs[ii,]$New_drop <- cypher(graph, query)[1,1]
# NEW hotels new relations
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch]-() return count( r );" )
dfs[ii,]$New_relation <- cypher(graph, query)[1,1]
# OLD hotels new relations
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch{QL2_CREATED_ON:", params$ql2_day,"}]-() where n.QL2_CREATED_ON < " , params$ql2_day, " return count( r );" )
dfs[ii,]$New_relation_old_hotel <- cypher(graph, query)[1,1]
}
write.table( dfs ,  file = paste0(basepath, "/data/",params$ql2_day, "_MATCH_STAT_", params$country, ".csv"), row.names=FALSE, na="", col.names=TRUE, sep=",", append=FALSE )
dfs
# Total new hotels by SOURCE
query<- paste0( "MATCH (n:ql2hotels{COUNTRY_UCODE:'CH'}) where n.QL2_CREATED_ON<=",params$ql2_day," and n.QL2_LAST_SEEN>=",params$ql2_day," return n.SOURCE as Source,count(*) as Tot_Hotel ORDER BY Tot_Hotel DESC;" )
dfs <- cypher(graph, query)
dfs$Tot_match <- 0
dfs$Tot_unmatch <- 0
dfs$New_Hotel <- 0
dfs$New_match <- 0
dfs$New_potential <- 0
dfs$New_unmatch <- 0
dfs$New_drop <- 0
dfs$New_relation <- 0
dfs$New_relation_old_hotel <- 0
for ( ii in 1:nrow(dfs ) ) {
source<-dfs[ii,1]
# Total hotel matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'})-[r:confirmautomatch]-(m) where n.QL2_CREATED_ON<=",params$ql2_day," RETURN count(distinct(n) );")
dfs[ii,]$Tot_match <- cypher(graph, query)[1,1]
# Total hotels unmatch by source
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() and n.QL2_CREATED_ON<=",params$ql2_day," return count(distinct(n) ) ;" )
dfs[ii,]$Tot_unmatch <- cypher(graph, query)[1,1]
# NEW hotels by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"', QL2_CREATED_ON:",params$ql2_day,"}) RETURN count(distinct(n));")
dfs[ii,]$New_Hotel <- cypher(graph, query)[1,1]
# NEW matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:confirmautomatch]-(m) RETURN count(distinct(n));")
dfs[ii,]$New_match <- cypher(graph, query)[1,1]
# NEW potential hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:potential]-(m) return count(distinct(n));" )
dfs[ii,]$New_potential <- cypher(graph, query)[1,1]
# NEW unmatch hotels by source
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() return count(distinct(n));" )
dfs[ii,]$New_unmatch <- cypher(graph, query)[1,1]
# NEW dropped hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' }) where ( n.QL2_LAST_SEEN<", params$ql2_day,") return count(distinct(n));" )
dfs[ii,]$New_drop <- cypher(graph, query)[1,1]
# NEW hotels new relations
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch]-() return count( r );" )
dfs[ii,]$New_relation <- cypher(graph, query)[1,1]
# OLD hotels new relations
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch{QL2_CREATED_ON:", params$ql2_day,"}]-() where n.QL2_CREATED_ON < " , params$ql2_day, " return count( r );" )
dfs[ii,]$New_relation_old_hotel <- cypher(graph, query)[1,1]
}
write.table( dfs ,  file = paste0(basepath, "/data/",params$ql2_day, "_MATCH_STAT_", params$country, ".csv"), row.names=FALSE, na="", col.names=TRUE, sep=",", append=FALSE )
dfs
# Total new hotels by SOURCE
query<- paste0( "MATCH (n:ql2hotels{COUNTRY_UCODE:'CH'}) where n.QL2_CREATED_ON<=",params$ql2_day," and n.QL2_LAST_SEEN>=",params$ql2_day," return n.SOURCE as Source,count(*) as Tot_Hotel ORDER BY Tot_Hotel DESC;" )
dfs <- cypher(graph, query)
dfs$Tot_match <- 0
dfs$Tot_unmatch <- 0
dfs$New_Hotel <- 0
dfs$New_match <- 0
dfs$New_potential <- 0
dfs$New_unmatch <- 0
dfs$New_drop <- 0
dfs$New_relation <- 0
dfs$New_relation_old_hotel <- 0
for ( ii in 1:nrow(dfs ) ) {
source<-dfs[ii,1]
# Total hotel matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'})-[r:confirmautomatch]-(m) where n.QL2_CREATED_ON<=",params$ql2_day," RETURN count(distinct(n) );")
dfs[ii,]$Tot_match <- cypher(graph, query)[1,1]
# Total hotels unmatch by source
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() and n.QL2_CREATED_ON<=",params$ql2_day," return count(distinct(n) ) ;" )
dfs[ii,]$Tot_unmatch <- cypher(graph, query)[1,1]
# NEW hotels by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"', QL2_CREATED_ON:",params$ql2_day,"}) RETURN count(distinct(n));")
dfs[ii,]$New_Hotel <- cypher(graph, query)[1,1]
# NEW matches by source
query<-paste0("MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:confirmautomatch]-(m) RETURN count(distinct(n));")
dfs[ii,]$New_match <- cypher(graph, query)[1,1]
# NEW potential hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' , QL2_CREATED_ON:",params$ql2_day,"})-[r:potential]-(m) return count(distinct(n));" )
dfs[ii,]$New_potential <- cypher(graph, query)[1,1]
# NEW unmatch hotels by source
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} ) WHERE NOT (n)-[:confirmautomatch]-() return count(distinct(n));" )
dfs[ii,]$New_unmatch <- cypher(graph, query)[1,1]
# NEW dropped hotels by source
query<- paste0( "match (n:ql2hotels{COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"' }) where ( n.QL2_LAST_SEEN<", params$ql2_day,") return count(distinct(n));" )
dfs[ii,]$New_drop <- cypher(graph, query)[1,1]
# NEW hotels new relations
query<- paste0( "MATCH (n:ql2hotels {QL2_CREATED_ON:", params$ql2_day,",COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch]-() return count( r );" )
dfs[ii,]$New_relation <- cypher(graph, query)[1,1]
# OLD hotels new relations
query<- paste0( "MATCH (n:ql2hotels {COUNTRY_UCODE:'",params$country,"',SOURCE:'",source,"'} )-[r:confirmautomatch{QL2_CREATED_ON:", params$ql2_day,"}]-() where n.QL2_CREATED_ON < " , params$ql2_day, " return count( r );" )
dfs[ii,]$New_relation_old_hotel <- cypher(graph, query)[1,1]
}
write.table( dfs ,  file = paste0(basepath, "/data/",params$ql2_day, "_MATCH_STAT_", params$country, ".csv"), row.names=FALSE, na="", col.names=TRUE, sep=",", append=FALSE )
dfs
install.packages("shiny")
shiny::runApp('class_shiny')
runApp('class_shiny')
mtcars
lm(hp ~ mpg , data=mtcars)
model1 <- lm(hp ~ mpg , data=mtcars)
model2 <- lm(hp ~ mpgsp + mpg , data=mtcars)
model2 <- lm(hp ~ mpgsp + mpg , data=mtcars)
runApp('class_shiny')
mtcars$mpgsp <- ifelse( mtcars$mpg - 20 > 0 , mtcars$mpg - 20 , 0 )
model1 <- lm(hp ~ mpg , data=mtcars)
model2 <- lm(hp ~ mpgsp + mpg , data=mtcars)
model1pred <- reactive({
mpgInput <- input$sliderMPG
predict(model1 , newdata = data.frame(mpg=mpgInput ))
})
model2pred <- reactive({
mpgInput <- input$sliderMPG
predict(model2 , newdata = data.frame(mpg=mpgInput, mpgsp <- ifelse( mpgInput - 20 > 0 , mpgInput -20 , 0) ))
})
output$plot1 <- renderPlot({
mpgInput <- input$sliderMPG
plot(mtcars$mpg, mtcars$hp, xlab = "Miles Per Gallon",
ylab = "Horsepower", bty = "n", pch = 16,
xlim = c(10, 35), ylim = c(50, 350))
if(input$showModel1){
abline(model1, col = "red", lwd = 2)
}
if(input$showModel2){
model2lines <- predict(model2, newdata = data.frame(
mpg = 10:35, mpgsp = ifelse(10:35 - 20 > 0, 10:35 - 20, 0)
))
lines(10:35, model2lines, col = "blue", lwd = 2)
}
legend(25, 250, c("Model 1 Prediction", "Model 2 Prediction"), pch = 16,
col = c("red", "blue"), bty = "n", cex = 1.2)
points(mpgInput, model1pred(), col = "red", pch = 16, cex = 2)
points(mpgInput, model2pred(), col = "blue", pch = 16, cex = 2)
})
output$pred1 <- renderText({
model1pred()
})
output$pred2 <- renderText({
model2pred()
})
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
runApp('class_shiny')
mtcars
runApp('class_shiny')
runApp('class_shiny')
runApp('class_shiny')
runApp('class_shiny')
clear
runApp('class_shiny')
runApp('class_shiny')
runApp('class_shiny')
mtcars
model1 <- lm(hp ~ mpg , data=mtcars)
model2 <- lm(hp ~ mpgsp + mpg , data=mtcars)
mtcars$mpgsp <- ifelse( mtcars$mpg - 20 > 0 , mtcars$mpg - 20 , 0 )
model1 <- lm(hp ~ mpg , data=mtcars)
model2 <- lm(hp ~ mpgsp + mpg , data=mtcars)
model1pred <- reactive({
mpgInput <- input$sliderMPG
predict(model1 , newdata = data.frame(mpg=mpgInput ))
})
model2pred <- reactive({
mpgInput <- input$sliderMPG
predict(model2 , newdata = data.frame(mpg=mpgInput, mpgsp2 <- ifelse( mpgInput - 20 > 0 , mpgInput -20 , 0) ))
})
mpgInput <- input$sliderMPG
plot(mtcars$mpg, mtcars$hp, xlab = "Miles Per Gallon",
ylab = "Horsepower", bty = "n", pch = 16,
xlim = c(10, 35), ylim = c(50, 350))
if(input$showModel1){
abline(model1, col = "red", lwd = 2)
}
if(input$showModel2){
model2lines <- predict(model2, newdata = data.frame(
mpg = 10:35, mpgsp3 = ifelse(10:35 - 20 > 0, 10:35 - 20, 0)
))
lines(10:35, model2lines, col = "blue", lwd = 2)
}
plot(mtcars$mpg, mtcars$hp, xlab = "Miles Per Gallon",
ylab = "Horsepower", bty = "n", pch = 16,
xlim = c(10, 35), ylim = c(50, 350))
abline(model1, col = "red", lwd = 2)
lines(10:35, model2lines, col = "blue", lwd = 2)
model2lines <- predict(model2, newdata = data.frame(
mpg = 10:35, mpgsp3 = ifelse(10:35 - 20 > 0, 10:35 - 20, 0)
))
model2lines <- predict(model2, newdata = data.frame(
mpg = 10:35, mpgsp = ifelse(10:35 - 20 > 0, 10:35 - 20, 0)
))
lines(10:35, model2lines, col = "blue", lwd = 2)
legend(25, 250, c("Model 1 Prediction", "Model 2 Prediction"), pch = 16,
col = c("red", "blue"), bty = "n", cex = 1.2)
points(mpgInput, model1pred(), col = "red", pch = 16, cex = 2)
points(mpgInput, model2pred(), col = "blue", pch = 16, cex = 2)
model1pred()
runApp('class_shiny')
runApp('class_shiny')
head(mtcars)
runApp('class_shiny')
runApp('class_shiny')
